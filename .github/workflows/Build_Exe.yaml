name: üñ•Ô∏è Build Windows EXE

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '**/Connect-A-PIC.csproj'

jobs:
  build_windows_exe:
    name: Build Windows EXE
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: 'recursive'

      - name: Extract Version from Project File
        id: project_version
        run: |
          version=$(grep '<Version>' Connect-A-PIC.csproj | sed -e 's/<[^>]*>//g' | xargs)
          echo "PROJECTVERSION=$version" >> $GITHUB_ENV

      - name: Print extracted Project version
        run: echo "The extracted Godot version is $PROJECTVERSION"

      - name: üíΩ Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          # Use the .NET SDK from global.json in the root of the repository.
          global-json-file: global.json

      - name: üì¶ Restore Dependencies
        run: dotnet restore

      - name: ü§ñ Setup Godot
        uses: chickensoft-games/setup-godot@v1
        with:
          # In this case, we are using the version from global.json.
          #
          # This allows checks on renovatebot PR's to succeed whenever
          # renovatebot updates the Godot SDK version.
          version: global.json

      - name: Create Build Directory
        run: mkdir -p $GITHUB_WORKSPACE/Release

      - name: üßë‚Äçüî¨ Generate .NET Bindings
        run: godot --headless --build-solutions --quit || exit 0

      - name: Build Windows EXE
        run: |
          godot --headless --export-release "Windows Desktop"
          if [ $? -ne 0 ]; then
            echo "Build failed with exit code $?"
            exit 1
          fi

      # Add Setup Certificate step here
      - name: Setup Certificate
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > ${{ github.workspace }}/Certificate_pkcs12.p12

      # Set environment variables and paths for the code signing process
      - name: Set variables for Code Signing
        run: |
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> $GITHUB_ENV
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> $GITHUB_ENV
          echo "SM_CLIENT_CERT_FILE=${{ github.workspace }}/Certificate_pkcs12.p12" >> $GITHUB_ENV
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> $GITHUB_ENV

      - name: Install osslsigncode
        run: sudo apt-get update && sudo apt-get install -y osslsigncode
        
      - name: Sign Windows EXE
        run: |
          osslsigncode sign \
            -pkcs12 ${{ env.SM_CLIENT_CERT_FILE }} \
            -pass ${{ secrets.SM_CLIENT_CERT_PASSWORD }} \
            -n "Connect-A-PIC" \
            -i "http://timestamp.digicert.com" \
            -t "http://timestamp.digicert.com" \
            -in ${{ github.workspace }}/Release/Connect-A-PIC.exe \
            -out ${{ github.workspace }}/Release/Connect-A-PIC-signed.exe
          mv -f ${{ github.workspace }}/Release/Connect-A-PIC-signed.exe ${{ github.workspace }}/Release/Connect-A-PIC.exe

      - name: Verify osslsigncode
        run: osslsigncode verify -in {{ github.workspace }}/Release/Connect-A-PIC.exe

      - name: Zip Release Build
        run: |
          cd ${{ github.workspace }}/Release
          zip -r ../ConnectAPIC.zip .
          echo "zip_path=${{ github.workspace }}/ConnectAPIC.zip" >> $GITHUB_ENV
          cd ..

      - name: List files in Release Directory
        run: |
          releaseDir="$GITHUB_WORKSPACE/Release"
          echo "Checking files in folder $releaseDir"
          if [ -z "$(ls -A $releaseDir)" ]; then
            echo "Error: No files found in the Release directory."
            exit 1
          fi
          ls -l $releaseDir

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PROJECTVERSION }}
          release_name: Release v${{ env.PROJECTVERSION }}
          draft: false
          prerelease: false
          body: "Automatically generated release"

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.zip_path }}
          asset_name: ConnectAPIC.zip
          asset_content_type: application/zip