name: üñ•Ô∏è Build Windows EXE

on:
  push:
    branches:
      - main 
    paths:
      - '**/Connect-A-PIC.csproj'

jobs:
  build_windows_exe:
    name: Build Windows EXE
    runs-on: windows-latest

    steps:
      - name: üßæ Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: 'recursive'
      
      - name: Install jq (if required)
        run: choco install jq

      - name: Extract Version from Project File
        id: project_version
        run: |
          $version = Select-String -Path "Connect-A-PIC.csproj" -Pattern '<Version>(.*)</Version>' | % { $_.Matches.Groups[1].Value }
          echo "::set-output name=VERSION::$version"

      - name: Print extracted version
        run: echo "The extracted project version is $env:VERSION"

      - name: Read Godot version from global.json
        id: godot_version
        run: |
          $godotVersion = Get-Content -Raw -Path 'global.json' | ConvertFrom-Json | Select-Object -ExpandProperty 'msbuild-sdks' | Select-Object -ExpandProperty 'Godot.NET.Sdk'
          echo "Godot version: $godotVersion"
          echo "::set-output name=VERSION::$godotVersion"

      - name: Print extracted version
        run: echo "The extracted Godot version is $env:VERSION"

      - name: Setup Godot
        uses: chickensoft-games/setup-godot@v1
        with:
          version: ${{ steps.godot_version.outputs.VERSION }}
      
      - name: Create Build Directory
        run: mkdir -p ${{ github.workspace }}\Release

      - name: Build Windows EXE
        run: |
          godot --headless --export-release "Windows Desktop"
        env:
          GODOT_EXPORT_PATH: ${{ github.workspace }}

      - name: Zip Release Build
        run: |
          $zipPath = Join-Path ${{ github.workspace }} "ConnectAPIC.zip"
          Compress-Archive -Path "${{ github.workspace }}/Release/*" -DestinationPath $zipPath

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.project_version.outputs.VERSION }}
          release_name: Release v${{ steps.project_version.outputs.VERSION }}
          draft: false
          prerelease: false
          body: "automatically generated release"

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/ConnectAPIC.zip
          asset_name: ConnectAPIC.zip
          asset_content_type: application/zip