name: üñ•Ô∏è Build Windows EXE

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '**/Connect-A-PIC.csproj'

jobs:
  build_windows_exe:
    name: Build Windows EXE
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          submodules: 'recursive'

      - name: Extract Version from Project File
        id: project_version
        run: |
          version=$(grep '<Version>' Connect-A-PIC.csproj | sed -e 's/<[^>]*>//g' | xargs)
          echo "PROJECTVERSION=$version" >> $GITHUB_ENV

      - name: Print extracted Project version
        run: echo "The extracted Godot version is $PROJECTVERSION"

      - name: Read Godot version from global.json
        run: |
          godotVersion=$(grep '"Godot.NET.Sdk"' global.json | awk -F '"' '{ print $4 }')
          echo "GODOTVERSION=$godotVersion" >> $GITHUB_ENV
        shell: bash

      - name: Print extracted Godot version
        run: echo "The extracted Godot version is $GODOTVERSION"

      - name: Setup Godot
        uses: chickensoft-games/setup-godot@v1
        with:
          version: ${{ env.GODOTVERSION }}

      - name: Create Build Directory
        run: mkdir -p $GITHUB_WORKSPACE/Release

      - name: Build Windows EXE
        run: |
          $GODOT --headless --export-release "Windows Desktop"
          if [ $? -ne 0 ]; then
            echo "Build failed with exit code $?"
            exit 1
          fi

      - name: Zip Release Build
        run: |
          $releaseDir = "${{ github.workspace }}/Release"
          Push-Location -Path $releaseDir
          $zipPath = "${{ github.workspace }}/ConnectAPIC.zip"
          Compress-Archive -Path "*" -DestinationPath $zipPath
          Pop-Location
        shell: pwsh

      - name: List files in Release Directory
        run: |
          releaseDir="$GITHUB_WORKSPACE/Release"
          echo "Checking files in folder $releaseDir"
          if [ -z "$(ls -A $releaseDir)" ]; then
            echo "Error: No files found in the Release directory."
            exit 1
          fi
          ls -l $releaseDir

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PROJECTVERSION }}
          release_name: Release v${{ env.PROJECTVERSION }}
          draft: false
          prerelease: false
          body: "Automatically generated release"

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.zip_path }}
          asset_name: ConnectAPIC.zip
          asset_content_type: application/zip