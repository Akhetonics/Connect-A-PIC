[gd_scene load_steps=9 format=3 uid="uid://b4ltp4nnviu3"]

[ext_resource type="Script" path="res://Scenes/Components/DirectionalCoupler/DirectionalCouplerView.cs" id="1_4tomk"]
[ext_resource type="Texture2D" uid="uid://cirsar1cf6vkh" path="res://Scenes/Components/DirectionalCoupler/Directional Coupler LeftUpIn.png" id="2_1cs17"]
[ext_resource type="Texture2D" uid="uid://c8u8whsex2jym" path="res://Scenes/Components/DirectionalCoupler/Directional Coupler.png" id="2_80i23"]
[ext_resource type="Texture2D" uid="uid://dl3wi88wuky6e" path="res://Scenes/Components/DirectionalCoupler/Directional Coupler LeftDown.png" id="3_jbild"]
[ext_resource type="Texture2D" uid="uid://b8r7q5o86dey3" path="res://Scenes/Components/DirectionalCoupler/Directional Coupler RightUp.png" id="4_sgbp3"]
[ext_resource type="Texture2D" uid="uid://crhu1ftb6mi8q" path="res://Scenes/Components/DirectionalCoupler/Directional Coupler RightDown.png" id="5_hqp3p"]

[sub_resource type="Shader" id="Shader_3pehe"]
code = "// Laser Farbe
shader_type canvas_item;
render_mode blend_add;

uniform vec4 laserColor;
uniform vec2 sizeInTiles;

uniform vec4 lightInFlow1; // x = intensity, y = phase, z = offsetx, w = offsety
uniform vec4 lightOutFlow1;
uniform vec4 lightInFlow2; 
uniform vec4 lightOutFlow2;
uniform vec4 lightInFlow3; 
uniform vec4 lightOutFlow3;
uniform vec4 lightInFlow4;
uniform vec4 lightOutFlow4;
uniform vec4 lightInFlow5;
uniform vec4 lightOutFlow5;
uniform vec4 lightInFlow6;
uniform vec4 lightOutFlow6;
uniform vec4 lightInFlow7;
uniform vec4 lightOutFlow7;
uniform vec4 lightInFlow8;
uniform vec4 lightOutFlow8;
// ... so viele wie man lustig ist. Am Besten 16 (8 in, 8 out) oder sowas, damit man nur einen einzigen Shader braucht für alle

uniform sampler2D animation1;
uniform sampler2D animation2;
uniform sampler2D animation3;
uniform sampler2D animation4;
uniform sampler2D animation5;
uniform sampler2D animation6;
uniform sampler2D animation7;
uniform sampler2D animation8;
// ... die hälfte von oben, also 8 (in/out ist ja nur umgedreht in der Zeit)

vec4 getColorOfAnimation(sampler2D animation, vec2 curUV, float animationTime, float animationspeed , vec4 lightFlowAndPos){
	float phaseShiftDisplacement = float(int(animationTime + round(lightFlowAndPos.y * animationspeed)) % 4) /4.0;
	vec2 animatedUvPosition = vec2( (curUV.x /4.0 + phaseShiftDisplacement ) , curUV.y);
	
	return texture(animation, animatedUvPosition );
}

float getIntensityOfLight(vec4 currentInflowColor, float lightInflowIntensity){
	
	return currentInflowColor.a *(currentInflowColor.r - currentInflowColor.b) * lightInflowIntensity;
}
void fragment(){
	float animationspeed = 2.0f;
	float animationTime = round(TIME * animationspeed);
	
	vec4 col_baseTexture = texture(TEXTURE, UV);
	vec4 col_anim1in  = getColorOfAnimation(animation1,UV,animationTime,animationspeed, lightInFlow1);
	vec4 col_anim1out = getColorOfAnimation(animation1,UV,animationTime,-animationspeed, lightOutFlow1);
    vec4 col_anim2in  = getColorOfAnimation(animation2,UV,animationTime,animationspeed, lightInFlow2);
	vec4 col_anim2out = getColorOfAnimation(animation2,UV,animationTime,-animationspeed, lightOutFlow2);
    vec4 col_anim3in  = getColorOfAnimation(animation3,UV,animationTime,animationspeed, lightInFlow3);
	vec4 col_anim3out = getColorOfAnimation(animation3,UV,animationTime,-animationspeed, lightOutFlow3);
    vec4 col_anim4in  = getColorOfAnimation(animation4,UV,animationTime,animationspeed, lightInFlow4);
	vec4 col_anim4out = getColorOfAnimation(animation4,UV,animationTime,-animationspeed, lightOutFlow4);
    vec4 col_anim5in  = getColorOfAnimation(animation5,UV,animationTime,animationspeed, lightInFlow5);
	vec4 col_anim5out = getColorOfAnimation(animation5,UV,animationTime,-animationspeed, lightOutFlow5);
    vec4 col_anim6in  = getColorOfAnimation(animation6,UV,animationTime,animationspeed, lightInFlow6);
	vec4 col_anim6out = getColorOfAnimation(animation6,UV,animationTime,-animationspeed, lightOutFlow6);
    vec4 col_anim7in  = getColorOfAnimation(animation7,UV,animationTime,animationspeed, lightInFlow7);
	vec4 col_anim7out = getColorOfAnimation(animation7,UV,animationTime,-animationspeed, lightOutFlow7);
    vec4 col_anim8in  = getColorOfAnimation(animation8,UV,animationTime,animationspeed, lightInFlow8);
	vec4 col_anim8out = getColorOfAnimation(animation8,UV,animationTime,-animationspeed, lightOutFlow8);
    
  // Der rot Kanal = höhen, z.B.
  // Der blau Kanal = tiefen
  float intensity = getIntensityOfLight( col_anim1in, lightInFlow1.x) + getIntensityOfLight( col_anim1out, lightOutFlow1.x) +
		getIntensityOfLight( col_anim2in, lightInFlow2.x) + getIntensityOfLight( col_anim2out, lightOutFlow2.x) + 
		getIntensityOfLight( col_anim3in, lightInFlow3.x) + getIntensityOfLight( col_anim3out, lightOutFlow3.x) + 
		getIntensityOfLight( col_anim4in, lightInFlow4.x) + getIntensityOfLight( col_anim4out, lightOutFlow4.x) + 
		getIntensityOfLight( col_anim5in, lightInFlow5.x) + getIntensityOfLight( col_anim5out, lightOutFlow5.x) + 
		getIntensityOfLight( col_anim6in, lightInFlow6.x) + getIntensityOfLight( col_anim6out, lightOutFlow6.x) + 
		getIntensityOfLight( col_anim7in, lightInFlow7.x) + getIntensityOfLight( col_anim7out, lightOutFlow7.x) + 
		getIntensityOfLight( col_anim8in, lightInFlow8.x) + getIntensityOfLight( col_anim8out, lightOutFlow8.x);


  COLOR = laserColor * abs(intensity);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_is3a8"]
shader = SubResource("Shader_3pehe")
shader_parameter/laserColor = Vector4(1, 0, 0, 1)
shader_parameter/sizeInTiles = Vector2(2, 2)
shader_parameter/lightInFlow1 = Vector4(2, 0, 0, 0)
shader_parameter/lightOutFlow1 = Vector4(0, 0, 0, 0)
shader_parameter/lightInFlow2 = Vector4(0, 0, 0, 0)
shader_parameter/lightOutFlow2 = Vector4(0, 0, 0, 0)
shader_parameter/lightInFlow3 = Vector4(0, 0, 0, 0)
shader_parameter/lightOutFlow3 = Vector4(0, 0, 0, 0)
shader_parameter/lightInFlow4 = Vector4(0, 0, 0, 0)
shader_parameter/lightOutFlow4 = Vector4(0, 0, 0, 0)
shader_parameter/lightInFlow5 = null
shader_parameter/lightOutFlow5 = null
shader_parameter/lightInFlow6 = null
shader_parameter/lightOutFlow6 = null
shader_parameter/lightInFlow7 = null
shader_parameter/lightOutFlow7 = null
shader_parameter/lightInFlow8 = null
shader_parameter/lightOutFlow8 = null
shader_parameter/animation1 = ExtResource("2_1cs17")
shader_parameter/animation2 = ExtResource("3_jbild")
shader_parameter/animation3 = ExtResource("4_sgbp3")
shader_parameter/animation4 = ExtResource("5_hqp3p")

[node name="DirectionalCoupler" type="TextureRect" node_paths=PackedStringArray("OverlayRed")]
custom_minimum_size = Vector2(122, 122)
layout_direction = 1
offset_right = 122.0
offset_bottom = 122.0
stretch_mode = 2
script = ExtResource("1_4tomk")
LightFlowOverlayLeftUpIn = ExtResource("2_1cs17")
LightFlowOverlayLeftDownIn = ExtResource("3_jbild")
LightFlowOverlayRightUpIn = ExtResource("4_sgbp3")
LightFlowOverlayRightDownIn = ExtResource("5_hqp3p")
WidthInTiles = 2
HeightInTiles = 2
OverlayRed = NodePath("OverlayRed")

[node name="BackgroundImage" type="Sprite2D" parent="."]
scale = Vector2(2, 2)
texture = ExtResource("2_80i23")
centered = false
region_rect = Rect2(11.5, 16, 41, 39)

[node name="OverlayRed" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_is3a8")
scale = Vector2(2, 2)
texture = ExtResource("2_80i23")
centered = false
region_rect = Rect2(0, 0, 62, 32)
